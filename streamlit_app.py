import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier  
import category_encoders as ce
import plotly.express as px

st.set_page_config(page_title="üêß Penguin Classifier", layout="wide")  

st.title('üêß Penguin Classifier - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
st.write('## –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –ø–∏–Ω–≥–≤–∏–Ω–æ–≤')

df = pd.read_csv("https://raw.githubusercontent.com/dataprofessor/data/master/penguins_cleaned.csv")

st.subheader('–°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ä–æ–∫')
st.dataframe(df.sample(10), use_container_width = True)


st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
col1, col2 = st.columns(2)

with col1:
    fig1 = px.histogram(df, x="species", color="island", barmode="group", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –ø–æ –æ—Å—Ç—Ä–æ–≤–∞–º")
    st.plotly_chart(fig1, use_container_width=True)

with col2:
    fig2 = px.scatter(df, x="bill_length_mm", y="flipper_length_mm", color="species", title="–î–ª–∏–Ω–∞ –∫–ª—é–≤–∞ vs –î–ª–∏–Ω–∞ –∫—Ä—ã–ª–∞")
    st.plotly_chart(fig2, use_container_width=True)


X = df.drop(["species"], axis = 1)
y = df["species"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)

encoder = ce.TargetEncoder(cols=["island", "sex"])
X_train_encoded = encoder.fit_transform(X_train, y_train)
X_test_encoded = encoder.transform(X_test)

models = {
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'KNN': KNeighborsClassifier()
}

results = []
for name, model in models.items():
    model.fit(X_train_encoded, y_train)
    acc_train = accuracy_score(y_train, model.predict(X_train_encoded))
    acc_test = accuracy_score(y_test, model.predict(X_test_encoded))
    results.append({
        'Model': name,
        'Train Accuracy': round(acc_train, 2),
        'Test Accuracy': round(acc_test, 2)
    })

st.write("### üß™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏")
st.table(pd.DataFrame(results))


st.sidebar.header("üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
island_input = st.sidebar.selectbox("–û—Å—Ç—Ä–æ–≤", df['island'].unique())
sex_input = st.sidebar.selectbox("–ü–æ–ª", df['sex'].unique())
bill_length = st.sidebar.slider("–î–ª–∏–Ω–∞ –∫–ª—é–≤–∞ (–º–º)", float(df['bill_length_mm'].min()), float(df['bill_length_mm'].max()), float(df['bill_length_mm'].mean()))
bill_depth = st.sidebar.slider("–ì–ª—É–±–∏–Ω–∞ –∫–ª—é–≤–∞ (–º–º)", float(df['bill_depth_mm'].min()), float(df['bill_depth_mm'].max()), float(df['bill_depth_mm'].mean()))
flipper_length = st.sidebar.slider("–î–ª–∏–Ω–∞ –∫—Ä—ã–ª–∞ (–º–º)", float(df['flipper_length_mm'].min()), float(df['flipper_length_mm'].max()), float(df['flipper_length_mm'].mean()))
body_mass = st.sidebar.slider("–ú–∞—Å—Å–∞ —Ç–µ–ª–∞ (–≥)", float(df['body_mass_g'].min()), float(df['body_mass_g'].max()), float(df['body_mass_g'].mean()))


user_input = pd.DataFrame({
    'island': island_input,
    'sex': sex_input,
    'bill_length_mm': bill_length,
    'bill_depth_mm': bill_depth,
    'flipper_length_mm': flipper_length,
    'body_mass_g': body_mass
}, index=[0])


user_encoded = encoder.transform(user_input)
for col in ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']:
    user_encoded[col] = user_input[col].values

user_encoded = user_encoded[X_train_encoded.columns]


st.sidebar.subheader("üîÆ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
for name, model in models.items():
    pred = model.predict(user_encoded)[0]  
    proba = model.predict_proba(user_encoded)[0]
    st.sidebar.markdown(f"**{name}: {pred}**")
    proba_df = pd.DataFrame({'–í–∏–¥': model.classes_, '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba})
    st.sidebar.dataframe(proba_df.set_index("–í–∏–¥"), use_container_width=True)


